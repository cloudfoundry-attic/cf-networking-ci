groups:
- name: cf-networking
  jobs:
  - mysql-tests
  - postgres-tests
  - pickelhelm-deploy
  - pickelhelm-test
  - mitre-deploy
  - mitre-test
  - mitre-acceptance-errand
  - mitre-smoke
  - mitre-cats
  - shipit
  - bump-minor-version
  - merge-master
  - toque-deploy
  - toque-push
  - toque-test
- name: trucker
  jobs:
  - bbl-up-trucker
  - trucker-deploy
  - trucker-vanilla-cats
  - trucker-upgrade
  - trucker-upgrade-cats
  - delete-trucker-deployment
- name: toque
  jobs:
  - toque-deploy
  - toque-push
  - toque-test
- name: cleanup
  jobs:
    - delete-deployment-mitre-cf
    - delete-pickelhelm-deployment
    - delete-toque-deployment
- name: version
  jobs:
  - major-bump
  - minor-bump
  - patch-bump

resources:
  ###### Deployments
  - name: mitre-cf
    type: bosh-deployment
    source:
      target: {{mitre-bosh-host}}
      username: {{mitre-bosh-user}}
      password: {{mitre-bosh-password}}
      deployment: cf
  ###### Control plane
  - name: container-networking-ci
    type: git
    source:
      uri: https://github.com/cloudfoundry-incubator/container-networking-ci
  - name: container-networking-deployments
    type: git
    source:
      uri: "git@github.com:cloudfoundry/container-networking-deployments.git"
      branch: master
      private_key: {{container-networking-deployments-push-key}}
  - name: cats-concourse-task
    type: git
    source:
      uri: https://github.com/cloudfoundry/cats-concourse-task
      branch: master
  - name: cf-deployment-concourse-tasks
    type: git
    source:
      uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks
      branch: master
  ###### BOSH stemcells
  - name: aws-stemcell
    type: bosh-io-stemcell
    source:
      name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent
  ###### BOSH release repos
  - name: cf-networking-dev
    type: git
    source:
      uri: git@github.com:cloudfoundry-incubator/cf-networking-release.git
      branch: develop
      ignore_paths:
        - docs
      private_key: {{cf-networking-deploy-key}}
  - name: cf-networking-master
    type: git
    source:
      uri: git@github.com:cloudfoundry-incubator/cf-networking-release.git
      branch: master
      private_key: {{cf-networking-deploy-key}}
  ####### Stats
  - name: mitre-stats
    type: git
    source:
      uri: "git@github.com:cf-container-networking/mitre-stats.git"
      branch: master
      private_key: {{container-networking-bot-key}}
  - name: toque-stats
    type: git
    source:
      uri: "git@github.com:cf-container-networking/toque-stats.git"
      branch: master
      private_key: {{container-networking-bot-key}}
  ####### Timers
  - name: every-half-hour
    type: time
    source:
      interval: 30m
  ####### Tests
  - name: cf-acceptance-tests
    type: git
    source:
      branch: master
      uri: git://github.com/cloudfoundry/cf-acceptance-tests.git
  - name: toque-scaling-test-params
    type: git
    source:
      uri: https://github.com/cf-container-networking/toque-scaling
      paths: [ test-params ]
  #######  Release management
  - name: version
    type: semver
    source:
      bucket: {{cf-networking-s3-bucket}}
      region_name: us-west-2
      initial_version: 0.2.0-rc.1
      key: releases/current-version
      access_key_id: {{aws-access-key-id}}
      secret_access_key: {{aws-secret-access-key}}
  - name: cf-networking-tarball
    type: s3
    source:
      bucket: {{cf-networking-candidate-s3-bucket}}
      region_name: us-west-2
      regexp: releases/cf-networking-(.*).tgz
      access_key_id: {{aws-access-key-id}}
      secret_access_key: {{aws-secret-access-key}}
  # Github release
  - name: cf-networking-github-release
    type: github-release
    source:
      user: cloudfoundry-incubator
      repository: cf-networking-release
      access_token: {{github-access-token}}
      drafts: true
  - name: cf-deployment
    type: git
    source:
      branch: master
      uri: https://github.com/cloudfoundry/cf-deployment.git

jobs:
  - name: bbl-up-trucker
    serial_groups: [trucker]
    plan:
    - aggregate:
      - get: cf-deployment-concourse-tasks
      - get: bbl-state
        resource: container-networking-deployments
    - task: bbl-up
      file: cf-deployment-concourse-tasks/bbl-up/task.yml
      params:
        BBL_GCP_SERVICE_ACCOUNT_KEY: ../gcp/service-account.key.json
        BBL_GCP_PROJECT_ID: cf-container-networking-gcp
        BBL_GCP_REGION: us-east1
        BBL_GCP_ZONE: us-east1-c
        BBL_STATE_DIR: environments/trucker/
        BBL_IAAS: gcp
        BBL_LB_CERT: {{trucker-lb-cert}}
        BBL_LB_KEY: {{trucker-lb-key}}
        LB_DOMAIN: trucker.c2c.cf-app.com
        BBL_ENV_NAME: trucker
    - put: container-networking-deployments
      params:
        repository: updated-bbl-state
        rebase: true

  - name: trucker-deploy
    serial_groups: [trucker]
    plan:
    - aggregate:
      - get: container-networking-ci
      - get: cf-deployment-concourse-tasks
      - get: bbl-state
        resource: container-networking-deployments
        passed: [bbl-up-trucker]
      - get: cf-deployment
        trigger: true
      - get: vars-store
        resource: container-networking-deployments
      - get: deployments-repo
        resource: container-networking-deployments
      - get: cf-networking-release
        resource: cf-networking-dev
        trigger: true
    - task: delete-deployment
      file: cf-deployment-concourse-tasks/bosh-delete-deployment/task.yml
      params:
        BBL_STATE_DIR: environments/trucker/
    - task: upload-stemcell
      file: cf-deployment-concourse-tasks/bosh-upload-stemcell-from-cf-deployment/task.yml
      params:
        BBL_STATE_DIR: environments/trucker/
    - task: collect-ops-files
      file: container-networking-ci/tasks/collect-ops-files.yml
      params:
        ENVIRONMENT_NAME: trucker
    - task: deploy-vanilla
      file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
      params:
        BBL_STATE_DIR: environments/trucker/
        SYSTEM_DOMAIN: trucker.c2c.cf-app.com
        OPS_FILES: gcp.yml
        VARS_STORE_FILE: environments/trucker/vars-store.yml
        REGENERATE_VARS_STORE: true
    - put: container-networking-deployments
      params:
        repository: updated-vars-store
        rebase: true

  - name: trucker-vanilla-cats
    serial_groups: [trucker]
    plan:
    - aggregate:
      - get: bbl-state
        resource: container-networking-deployments
        passed: [trucker-deploy]
        trigger: true
      - get: container-networking-ci
      - get: cats-concourse-task
      - get: cf-deployment
        passed: [trucker-deploy]
      - get: cf-deployment-concourse-tasks
      - get: vars-store
        resource: container-networking-deployments
        passed: [trucker-deploy]
        trigger: true
      - get: integration-configs
        resource: container-networking-deployments
      - get: cf-acceptance-tests
    - task: update-cats-config
      file: cf-deployment-concourse-tasks/update-integration-configs/task.yml
      params:
        CATS_INTEGRATION_CONFIG_FILE: environments/trucker/integration_config.json
        VARS_STORE_FILE: environments/trucker/vars-store.yml
    - task: cats
      file: cats-concourse-task/task.yml
      input_mapping:
        integration-config: updated-integration-configs
      params:
        NODES: 16
        CONFIG_FILE_PATH: environments/trucker/integration_config.json

  - name: trucker-upgrade
    serial_groups: [trucker]
    plan:
    - aggregate:
      - get: container-networking-ci
      - get: cf-deployment-concourse-tasks
      - get: bbl-state
        resource: container-networking-deployments
        passed: [trucker-vanilla-cats]
        trigger: true
      - get: cf-deployment
        passed: [trucker-vanilla-cats]
      - get: vars-store
        resource: container-networking-deployments
        passed: [trucker-vanilla-cats]
      - get: deployments-repo
        resource: container-networking-deployments
      - get: cf-networking-release
        resource: cf-networking-dev
    - task: collect-ops-files
      file: container-networking-ci/tasks/collect-ops-files.yml
      params:
        ENVIRONMENT_NAME: trucker
    - task: deploy-upgrade
      file: cf-deployment-concourse-tasks/bosh-deploy-with-created-release/task.yml
      params:
        BBL_STATE_DIR: environments/trucker/
        OPS_FILES: gcp.yml cf-networking.yml
        SYSTEM_DOMAIN: trucker.c2c.cf-app.com
        VARS_STORE_FILE: environments/trucker/vars-store.yml
      input_mapping:
        release: cf-networking-release
    - put: container-networking-deployments
      params:
        repository: updated-vars-store
        rebase: true

  - name: trucker-upgrade-cats
    serial_groups: [trucker]
    plan:
    - aggregate:
      - get: bbl-state
        resource: container-networking-deployments
        passed: [trucker-upgrade]
        trigger: true
      - get: container-networking-ci
      - get: cats-concourse-task
      - get: cf-deployment-concourse-tasks
      - get: vars-store
        resource: container-networking-deployments
        passed: [trucker-upgrade]
      - get: integration-configs
        resource: container-networking-deployments
      - get: cf-acceptance-tests
    - task: update-cats-config
      file: cf-deployment-concourse-tasks/update-integration-configs/task.yml
      params:
        CATS_INTEGRATION_CONFIG_FILE: environments/trucker/integration_config.json
        VARS_STORE_FILE: environments/trucker/vars-store.yml
    - task: include-container-networking
      file: container-networking-ci/tasks/include-container-networking.yml
    - task: cats
      file: cats-concourse-task/task.yml
      input_mapping:
        integration-config: integration-config-with-cf-networking
      params:
        NODES: 16
        CONFIG_FILE_PATH: integration_config.json

  - name: delete-trucker-deployment
    serial_groups: [trucker]
    plan:
    - aggregate:
      - get: bbl-state
        resource: container-networking-deployments
        passed: [trucker-upgrade-cats]
        trigger: true
      - get: cf-deployment-concourse-tasks
    - task: delete-deployment
      file: cf-deployment-concourse-tasks/bosh-delete-deployment/task.yml
      params:
        BBL_STATE_DIR: environments/trucker/

  - name: postgres-tests
    public: true
    plan:
    - aggregate:
      - get: cf-networking-release
        resource: cf-networking-dev
        trigger: true
    - task: unit-and-integration-tests
      file: cf-networking-release/ci/postgres-tests.yml
      privileged: true

  - name: mysql-tests
    public: true
    plan:
    - aggregate:
      - get: cf-networking-release
        resource: cf-networking-dev
        trigger: true
    - task: unit-and-integration-tests
      file: cf-networking-release/ci/mysql-tests.yml
      privileged: true

  - name: pickelhelm-deploy
    serial_groups: [pickelhelm]
    plan:
      - aggregate:
        - get: container-networking-ci
        - get: cf-deployment-concourse-tasks
        - get: deployments-repo
          resource: container-networking-deployments
        - get: bbl-state
          resource: container-networking-deployments
        - get: vars-store
          resource: container-networking-deployments
        - get: cf-deployment
          trigger: true
        - get: cf-networking-release
          resource: cf-networking-dev
          trigger: true
          passed: [postgres-tests, mysql-tests]
      - task: upload-stemcell
        file: cf-deployment-concourse-tasks/bosh-upload-stemcell-from-cf-deployment/task.yml
        params:
          BBL_STATE_DIR: environments/pickelhelm/
      - task: collect-ops-files
        file: container-networking-ci/tasks/collect-ops-files.yml
        params:
          ENVIRONMENT_NAME: pickelhelm
      - task: deploy-cf
        file: cf-deployment-concourse-tasks/bosh-deploy-with-created-release/task.yml
        params:
          BBL_STATE_DIR: environments/pickelhelm/
          SYSTEM_DOMAIN: pickelhelm.c2c.cf-app.com
          OPS_FILES: change-logging-port-for-aws-elb.yml cf-networking.yml opsfile.yml
          VARS_STORE_FILE: environments/pickelhelm/vars-store.yml
        input_mapping:
          release: cf-networking-release
      - put: container-networking-deployments
        params:
          repository: updated-vars-store
          rebase: true

  - name: pickelhelm-test
    serial_groups: [pickelhelm]
    plan:
      - aggregate:
        - get: container-networking-ci
        - get: test-config
          resource: container-networking-deployments
        - get: cf-deployment
          passed: [pickelhelm-deploy]
        - get: cf-networking
          resource: cf-networking-dev
          passed: [pickelhelm-deploy]
          trigger: true
      - task: acceptance-tests
        file: container-networking-ci/tasks/acceptance-tests.yml
        params:
          ENVIRONMENT_NAME: pickelhelm

  - name: mitre-deploy
    serial_groups: [mitre, version]
    plan:
      - aggregate:
        - get: container-networking-ci
          resource: container-networking-ci
        - get: deployments-repo
          resource: container-networking-deployments
        - get: cf-deployment
          passed: [pickelhelm-test]
          trigger: true
        - get: aws-stemcell
          trigger: true
        - get: cf-networking
          resource: cf-networking-dev
          passed: [pickelhelm-test]
          trigger: true
        - get: version
          params:
            pre: rc
      - aggregate:
        - task: create-release-tarball
          file: cf-networking/ci/create-release-tarball.yml
        - task: generate-mitre-manifest
          file: container-networking-ci/tasks/generate-cf-deployment-manifest.yml
          params:
            ENVIRONMENT_NAME: mitre
      - put: cf-networking-tarball
        params:
          from: tarballs/cf-networking-([^/]*).tgz
          to: releases/
      - put: version
        params: {file: version/number}
      - put: mitre-cf
        params:
          cleanup: false
          manifest: deployment-manifest/cf.yml
          stemcells:
          - aws-stemcell/*.tgz
          releases:
          - tarballs/*.tgz
      - put: container-networking-deployments
        params:
          repository: deployments-repo-output
          rebase: true

  - name: mitre-test
    serial_groups: [mitre]
    plan:
      - aggregate:
        - get: deployments-repo
          resource: container-networking-deployments
        - get: test-config
          resource: container-networking-deployments
        - get: cf-networking
          resource: cf-networking-dev
          passed: [mitre-deploy]
          trigger: true
        - get: cf-networking-tarball
          passed: [mitre-deploy]
        - get: version
          passed: [mitre-deploy]
        - get: container-networking-ci
        - get: cf-deployment
          passed: [mitre-deploy]
          trigger: true
        - get: mitre-stats
        - get: mitre-cf
          passed: [mitre-deploy]
          trigger: true
      - task: acceptance-tests
        file: container-networking-ci/tasks/acceptance-tests.yml
        params:
          ENVIRONMENT_NAME: mitre
      - task: commit-stats
        file: container-networking-ci/tasks/commit-new-file.yml
        input_mapping:
          input_repo: mitre-stats
          source: network-stats
        output_mapping: {output_repo: stats_output}
        params:
          SOURCE_FILE: stats.json
          DEST_SUFFIX: json
      - put: mitre-stats
        params: {repository: stats_output}

  - name: mitre-acceptance-errand
    serial_groups: [mitre]
    plan:
      - aggregate:
        - get: container-networking-ci
        - get: deployments-repo
          resource: container-networking-deployments
        - get: cf-networking-tarball
          passed: [mitre-test]
          trigger: true
      - task: run-errand
        file: container-networking-ci/tasks/run-errand.yml
        params:
          ENVIRONMENT_NAME: mitre
          ERRAND: cf-networking-acceptance

  - name: mitre-smoke
    serial_groups: [mitre]
    plan:
      - aggregate:
        - get: test-config
          resource: container-networking-deployments
        - get: cf-networking
          resource: cf-networking-dev
          passed: [mitre-test]
          trigger: true
        - get: container-networking-ci
        - get: cf-deployment
          passed: [mitre-test]
          trigger: true
      - task: smoke-tests
        file: container-networking-ci/tasks/smoke-tests.yml
        params:
          ENVIRONMENT_NAME: mitre
          DATADOG_API_KEY: {{datadog_api_key}}

  - name: mitre-cats
    serial_groups: [mitre]
    plan:
      - aggregate:
        - get: container-networking-ci
        - get: cf-acceptance-tests
        - get: cats-concourse-task
        - get: cf-networking
          resource: cf-networking-dev
          passed: [mitre-test]
          trigger: true
        - get: cf-deployment
          passed: [mitre-test]
          trigger: true
        - get: container-networking-deployments
        - get: cf-networking-tarball
          passed: [mitre-test]
        - get: version
          passed: [mitre-test]
      - task: copy-config
        params:
          ENVIRONMENT: mitre
        file: container-networking-ci/tasks/copy-config.yml
      - task: cats
        file: cats-concourse-task/task.yml
        params:
          NODES: 16

  - name: toque-deploy
    serial_groups: [toque]
    plan:
      - aggregate:
        - get: container-networking-ci
        - get: cf-deployment-concourse-tasks
        - get: deployments-repo
          resource: container-networking-deployments
        - get: bbl-state
          resource: container-networking-deployments
        - get: vars-store
          resource: container-networking-deployments
        - get: cf-deployment
          trigger: true
        - get: cf-networking-release
          resource: cf-networking-dev
          passed: [mysql-tests, postgres-tests]
      - task: upload-stemcell
        file: cf-deployment-concourse-tasks/bosh-upload-stemcell-from-cf-deployment/task.yml
        params:
          BBL_STATE_DIR: environments/toque/
      - task: collect-ops-files
        file: container-networking-ci/tasks/collect-ops-files.yml
        params:
          ENVIRONMENT_NAME: toque
      - task: deploy-cf
        file: cf-deployment-concourse-tasks/bosh-deploy-with-created-release/task.yml
        params:
          BBL_STATE_DIR: environments/toque/
          SYSTEM_DOMAIN: toque.c2c.cf-app.com
          OPS_FILES: gcp.yml tcp-routing-gcp.yml use-3-azs-for-router.yml cf-networking.yml opsfile.yml
          VARS_STORE_FILE: environments/toque/vars-store.yml
        input_mapping:
          release: cf-networking-release
      - put: container-networking-deployments
        params:
          repository: updated-vars-store
          rebase: true

  - name: toque-push
    serial_groups: [toque]
    plan:
      - aggregate:
        - get: deployments-repo
          resource: container-networking-deployments
          passed: [toque-deploy]
        - get: cf-networking
          resource: cf-networking-dev
          passed: [toque-deploy]
          trigger: true
        - get: container-networking-ci
        - get: scaling-test-params
          resource: toque-scaling-test-params
          trigger: true
      - task: set-scaling-test-params
        file: container-networking-ci/tasks/set-scaling-test-params.yml
        params:
          ENVIRONMENT_NAME: toque
      - task: push-apps
        file: container-networking-ci/tasks/push-apps.yml
        params:
          ENVIRONMENT_NAME: toque

  - name: toque-test
    serial_groups: [toque]
    plan:
      - aggregate:
        - get: every-half-hour
          trigger: true
        - get: deployments-repo
          resource: container-networking-deployments
          passed: [toque-push]
        - get: cf-networking
          resource: cf-networking-dev
          passed: [toque-push]
        - get: container-networking-ci
        - get: scaling-test-params
          resource: toque-scaling-test-params
          passed: [toque-push]
        - get: toque-stats
      - task: set-scaling-test-params
        file: container-networking-ci/tasks/set-scaling-test-params.yml
        params:
          ENVIRONMENT_NAME: toque
      - task: emit-datadog-test-start
        file: container-networking-ci/tasks/emit-datadog-event.yml
        params:
          TITLE: test_start
          TEXT: test_start
          PRIORITY: normal
          AWS_ENV: toque.c2c.cf-app.com
          DATADOG_API_KEY: {{datadog_api_key}}
      - task: test-scalability
        file: container-networking-ci/tasks/test-scalability.yml
        params:
          ENVIRONMENT_NAME: toque
      - task: emit-datadog-test-stop
        file: container-networking-ci/tasks/emit-datadog-event.yml
        params:
          TITLE: test_end
          TEXT: test_end
          PRIORITY: normal
          AWS_ENV: toque.c2c.cf-app.com
          DATADOG_API_KEY: {{datadog_api_key}}

##### Human-triggered utilities

  - name: delete-pickelhelm-deployment
    public: true
    serial_groups: [pickelhelm]
    plan:
    - aggregate:
      - get: bbl-state
        resource: container-networking-deployments
      - get: cf-deployment-concourse-tasks
    - task: delete-deployment
      file: cf-deployment-concourse-tasks/bosh-delete-deployment/task.yml
      params:
        BBL_STATE_DIR: environments/pickelhelm/

  - name: delete-deployment-mitre-cf
    public: true
    serial_groups: [mitre]
    plan:
    - aggregate:
      - get: bbl-state
        resource: container-networking-deployments
      - get: cf-deployment-concourse-tasks
    - task: delete-deployment
      file: cf-deployment-concourse-tasks/bosh-delete-deployment/task.yml
      params:
        BBL_STATE_DIR: environments/mitre/

  - name: delete-toque-deployment
    public: true
    serial_groups: [toque]
    plan:
    - aggregate:
      - get: bbl-state
        resource: container-networking-deployments
      - get: cf-deployment-concourse-tasks
    - task: delete-deployment
      file: cf-deployment-concourse-tasks/bosh-delete-deployment/task.yml
      params:
        BBL_STATE_DIR: environments/toque/

  - name: shipit
    serial_groups: [version]
    plan:
    - do:
      - aggregate:
        - get: container-networking-deployments
        - get: container-networking-ci
        - get: version
          params:
            bump: final
          passed: [mitre-cats]
        - get: cf-networking
          resource: cf-networking-dev
          params:
            fetch: [master]
            submodules: none
          passed: [mitre-cats]
        - get: cf-deployment
          passed: [mitre-cats]
        - get: cf-networking-tarball
          passed: [mitre-cats]
      - task: shipit
        file: container-networking-ci/tasks/shipit.yml
      - task: build-cli
        file: container-networking-ci/tasks/build-cli.yml
      - put: version
        params: {file: version/number}
      - put: cf-networking-master
        params:
          repository: release/master
          tag: version/number
          tag_prefix: v
      - put: cf-networking-tarball
        params:
          from: final-release/cf-networking-([^/]*).tgz
          to: releases/
      - task: build-release-notes
        file: container-networking-ci/tasks/build-release-notes.yml
      - put: cf-networking-github-release
        params:
          name: version/number
          tag: version/number
          body: release-notes/notes.md
          tag_prefix: v
          globs:
          - final-release/cf-networking-*.tgz
          - binaries/network-policy-plugin-*

  # bump minor version (i.e. 0.1.0 -> 0.2.0)
  - name: bump-minor-version
    serial_groups: [version]
    plan:
    - aggregate:
      - get: version
        trigger: true
        passed: [shipit]
        params: {bump: minor, pre: rc}
    - put: version
      params: {file: version/number}

  # merge master back to develop
  - name: merge-master
    plan:
    - do:
      - aggregate:
        - get: container-networking-ci
        - get: cf-networking-master
          params:
            submodules: none
            fetch: [develop]
          passed: [shipit]
          trigger: true
        - get: cf-networking-dev
          params: {submodules: none}
      - task: merge-master
        file: container-networking-ci/tasks/merge-master.yml
      - put: cf-networking-dev
        params: {repository: release-merged}

  # versioning
  - name: patch-bump
    serial_groups: [version]
    plan:
    - get: version
      params: {bump: patch}
    - put: version
      params: {file: version/number}

  - name: minor-bump
    serial_groups: [version]
    plan:
    - get: version
      params: {bump: minor}
    - put: version
      params: {file: version/number}

  - name: major-bump
    serial_groups: [version]
    plan:
    - get: version
      params: {bump: major}
    - put: version
      params: {file: version/number}
